#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\options openright
\use_default_options false
\master ../thesis.lyx
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding T1
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 1
\use_package mhchem 0
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Indice
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style swiss
\dynamic_quotes 0
\papercolumns 1
\papersides 2
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Steller Sea Lion Dataset
\end_layout

\begin_layout Standard
The goal of Steller Sea Lion Count competition is to estimate the number
 of each type of sea lions in a given image.
 The different types of sea lions are: adult males, subadult males, adult
 females, juveniles and pups.
 There are totally 947 training images and 18639 testing images.
 For each training image, we have two versions: the original one and the
 one with colored dots in the center of each sea lion.
 Different images may have different sizes but all the sizes are around
 4500 x 3000 x 3, thus the image is quite large occupying around 5MB space.
 The large amount of high resolution images brings us two major problems.
 First, during training we need to deal with memory consumption and we may
 need to split the image into patches or resize the image in order to fit
 them into GPU's memory.
 Second, in the testing phase, we need to have short inference time due
 to the huge amount testing images.
 In figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Training-image-pair"
plural "false"
caps "false"
noprefix "false"

\end_inset

, a sampled training image pair is provided.
 Different dot color indicates different sea lion types:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/0.jpg
	lyxscale 5
	width 45text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Original image
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/0_dot.jpg
	lyxscale 5
	width 45text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Labeled image
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Training-image-pair"

\end_inset

Training image pair
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Itemize
red: adult males
\end_layout

\begin_layout Itemize
magenta: subadult males
\end_layout

\begin_layout Itemize
brown: adult females
\end_layout

\begin_layout Itemize
blue: juveniles
\end_layout

\begin_layout Itemize
green: pups
\end_layout

\begin_layout Standard
As we can see in the figure, there are some black regions in the labeled
 images.
 The black regions are added by the data provider in order to filter out
 controversial sea lions.
 Another thing to notice is that the number of sea lions varies a lot in
 different images.
 We can have an image containing more than 900 sea lions or an image containing
 only 3.
 Also it is not a uniform distribution for different sea lion types.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Sea-lion-types"
plural "false"
caps "false"
noprefix "false"

\end_inset

 is a summary of sea lion type distribution in the whole training dataset.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/distribution.png
	lyxscale 30
	width 70text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Sea-lion-types"

\end_inset

Sea lion types distribution
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In our experiments, we construct our own testing set from the 947 training
 images.
 More specifically, all the images with id 750 â€“ 947 are used as test set
 which are never been seen in the training phase.
 These testing images are used as the indicator of algorithm performance.
\end_layout

\begin_layout Section
Data Preprocessing
\end_layout

\begin_layout Standard
In order to construct the training dataset, we need to do some data preprocessin
g.
 First of all, we use blob detection to get the color of each centered dot
 and its coordinates.
 Then we can use these coordinates to construct dot labeled inputs which
 are required in Count-ception architecture.
 In order to deal with GPU memory consumption, we exploit two methods: image
 scaling and separation.
 Data augmentation is used to balance sea lion types and improve classification
 performance.
 
\end_layout

\begin_layout Subsection
Blob Detection
\end_layout

\begin_layout Standard
In computer vision, blob detection methods are aimed at detecting regions
 in a digital image that differ in properties, such as brightness or color,
 compared to surrounding regions.
 Informally, a blob is a region of an image in which some properties are
 constant or approximately constant; all the points in a blob can be considered
 in some sense to be similar to each other.
 The most common method for blob detection is convolution.
 
\end_layout

\begin_layout Standard
A dot in labeled images is a blob which contains the similar pixel values
 within a small region, thus we can use blob detection to find the center
 coordinates of the dot.
 After we get the center coordinates, we can use RGB values to classify
 its color and get the corresponding sea lion type.
 Luckily we don't need to implement blob detection algorithm from scratch,
 there are many open source implementations for this algorithm and in this
 thesis we use the version provided by OpenCV.
 Here are the decision rules we used to classify dot color using RGB values:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if R > 255 and B < 25 and G < 25:
\end_layout

\begin_layout Plain Layout

	then red
\end_layout

\begin_layout Plain Layout

elif R > 255 and B > 255 and G < 25:
\end_layout

\begin_layout Plain Layout

	then magenta
\end_layout

\begin_layout Plain Layout

elif R < 75 and B < 50 and 150 < G < 200:
\end_layout

\begin_layout Plain Layout

	then green
\end_layout

\begin_layout Plain Layout

elif R < 75 and 150 < B < 200 and G < 75:
\end_layout

\begin_layout Plain Layout

	then blue
\end_layout

\begin_layout Plain Layout

elif 60 < R < 120 and B < 50 and G < 75:
\end_layout

\begin_layout Plain Layout

	then brown
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Dot color classification
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Target Map Construction
\end_layout

\begin_layout Standard
In order to calculate the loss for Count-ception architecture, we need to
 construct the target map manually.
 After we get the coordinates for each sea lion, we can construct a dot
 label image indicating positions of each sea lion.
 This dot image has the same dimension as the original image and has 255
 pixel value at each sea lion position while all the other pixel values
 are zero.
 Padding is used to deal with sea lions near the boarder.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/0_cell2.png
	lyxscale 10
	width 45text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Original image
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/0_dot2.png
	lyxscale 10
	width 45text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
dot labeled image
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Pre-processed images
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Image resizing and separation
\end_layout

\begin_layout Standard
The original sea lion image has quite high resolution and it can consume
 too much memory.
 When we train our neural network with GPU, we not only need to load the
 image, but also need to store the parameters and all the intermediate values
 which are used to calculate gradients in back propagation.
 In order to deal with this memory issue, we mainly exploit image scaling
 and separation.
 
\end_layout

\begin_layout Standard
In computer graphics and digital imaging, image scaling refers to the resizing
 of a digital image.
 When scaling a vector graphic image, the graphic primitives that make up
 the image can be scaled using geometric transformations, with no loss of
 image quality.
 When scaling a raster graphics image, a new image with a higher or lower
 number of pixels must be generated.
 In case of decreasing the pixel number this usually results in a visible
 quality loss.
 There are quite some image rescaling algorithms, like Nearest-neighbor
 interpolation, bilinear and bicubic algorithm, and etc.
 The details of these algorithms are not our concern in this thesis, we
 are more interested in the downsampling effect.
 The sea lion images are raster graphics and we half the its size to reduce
 memory consumption.
 As a result we lose some pixel information and everything becomes smaller.
 There are mainly two effects:
\end_layout

\begin_layout Itemize
By losing some pixel values, the information left may not be sufficient
 to distinguish each sea lion type.
\end_layout

\begin_layout Itemize
When we downsample the image, everything becomes smaller and thus we need
 re-design the receptive field size in order to better fit each sea lion.
 
\end_layout

\begin_layout Standard
Another method to deal with memory consumption is to separate each image
 into patches and then process each patch to sum up the counts as the final
 result.
 By using this method, we do not lose pixel values and each object does
 not shrink.
 However, when we generate patches using a non-overlapping sliding window,
 we may cut off some objects and this can hurt performance.
 
\end_layout

\begin_layout Standard
In a word, both image scaling and separation have disadvantages and in fact
 using these two methods is just a compromise due to the limited memory
 of GPU.
\end_layout

\begin_layout Subsection
Data Augmentation 
\end_layout

\begin_layout Standard
Data augmentation is a common technique used to improve the performance
 of neural networks.
 Overfitting is a challenge for deep learning models due to insufficient
 amount of data and complex network structures.
 We can not simplify the deep learning architecture when we have a non trivial
 problem but we can increase the training data by data augmentation.
 Given an input image, we can rotate, flip and zoom it to enrich our dataset.
 In Steller sea lion dataset, we use data augmentation to create more training
 samples and improve classification performance.
 
\end_layout

\end_body
\end_document
