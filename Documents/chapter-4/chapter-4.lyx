#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\options openright
\use_default_options false
\master ../thesis.lyx
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding T1
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 1
\use_package mhchem 0
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Indice
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style swiss
\dynamic_quotes 0
\papercolumns 1
\papersides 2
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Steller Sea Lion Dataset
\end_layout

\begin_layout Standard
The goal of Steller Sea Lion Count competition is to estimate each type
 of sea lion in each one of test images.
 The different types of sea lion are: adult males, subadult males, adult
 females, and pups.
 There are totally 947 training images and 18639 testing images.
 For each training image, we have two versions: the original one and the
 one with colored dots in the center of each sea lion.
 Different images may have different sizes but all the sizes are around
 4500x3000x3, thus the image is quite large occupying around 5MB space.
 The high resolution images bring us two major problems.
 First, during training we need to deal with memory consumption and we can
 not have a large number of batch size, otherwise they won't fit into GPU
 memory.
 Second, in the testing phase, we need to have short inference time due
 to huge amount testing images.
 In figure 4.1, a sampled training image pair is provided.
 Different color indicates different sea lion types:
\end_layout

\begin_layout Itemize
red: adult males
\end_layout

\begin_layout Itemize
magenta: subadult males
\end_layout

\begin_layout Itemize
brown: adult females
\end_layout

\begin_layout Itemize
blue: juveniles
\end_layout

\begin_layout Itemize
green: pups
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/0.jpg
	lyxscale 10

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Original image
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/0_dot.jpg
	lyxscale 10

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Labeled image
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Training image pair
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
As we can see in the figure, there are some black regions in the labeled
 images.
 The black regions are added by the data provider in order to filter out
 controversial sea lions.
 Another thing to notice is the number of sea lions in each image.
 In the image pair example above, we have around 900 sea lions but the number
 of sea lions varies a lot in different images.
 More specifically, we can have only one or two sea lions in some images.
 Also it is not an uniform distribution for sea lion types.
 Here is a summary of sea lion type distribution in the training dataset:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Sea lion types distribution
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Data Preprocessing
\end_layout

\begin_layout Standard
In order to construct the training dataset, we need to do some data preprocessin
g.
 First of all, we use blob detection to find the color of each dot and its
 coordinates.
 Then we can use these coordinates to construct target maps which are used
 in our Count-ception architecture.
 Data augmentation is used to balance sea lion types and improve classification
 performance.
 
\end_layout

\begin_layout Subsection
Blob Detection
\end_layout

\begin_layout Standard
In computer vision, blob detection methods are aimed at detecting regions
 in a digital image that differ in properties, such as brightness or color,
 compared to surrounding regions.
 Informally, a blob is a region of an image in which some properties are
 constant or approximately constant; all the points in a blob can be considered
 in some sense to be similar to each other.
 The most common method for blob detection is convolution.
 
\end_layout

\begin_layout Standard
A dot in labeled images is a blob which contains the same pixel values,
 thus we can use blob detection to find the center coordinates of the dot.
 After we get the center coordinates, we can use R, G, B values to decide
 the color and get the corresponding sea lion type.
 Luckily we don't need to implement blob detection algorithm from scratch,
 there are many open source implementations for this algorithm and in this
 thesis we use the version provided by opencv.
 
\end_layout

\begin_layout Subsection
Target Map Construction
\end_layout

\begin_layout Standard
In order to make Count-ception architecture work, we need to construct the
 target map manually.
 After we get the coordinate for each sea lion, we can construct a virtual
 image indicating positions of each sea lion.
 The virtual image has the same dimension as the original image and has
 255 pixel value at each sea lion coordinate, all the other pixel values
 are zero.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/0_cell2.png
	lyxscale 10

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Original Image
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/0_dot2.png
	lyxscale 10

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Virtual Image
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
As mentioned before, target map network is a simple CNN architecture with
 one convolution layer.
 The target construction network is used on the virtual image in order to
 get the target map which is a heat map indicating positive object area.
 The convolution operation is implemented by pad zero and stride one and
 the filter is filled with ones.
 When we convolve the filter with the virtual image, we will get a positive
 value if the object dot is inside the filter, otherwise we will get a zero.
 Let us see an example, we have a virtual image of size 120x120 and there
 is an object dot at center of the image.
 After convolution, the virtual image turns into target map.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/virtual_image.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Virtual image
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/activation_map.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Target map
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Recall that in the labeled images, we have a colored dot at the center of
 each sea lion and when we design the target map network, we need to pay
 attention to the filter size.
 We call the filter is activated when we get a positive output.
 In the example above, the filter size is 48x48 and it is activated when
 the red dot hits the right bottom corner of the filter.
 It is easy to see that the activation area in the virtual image is twice
 the size of the filter minus one, as illustrated in figure 4.7.
 When we try to design the filter size, we need to keep in mind that the
 object should lie inside the activation area.
 Note that the original image and virtual image has the same size.
 In Steller sea lion dataset, the largest type of sea lion is the adult
 male which is around 96x96 pixels, so we can make the filter size equals
 to 48.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/filter.png
	lyxscale 10

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Activation area
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Data Augmentation 
\end_layout

\begin_layout Standard
Data augmentation is a common technique used to improve the performance
 of neural networks.
 Overfitting is a challenge for deep learning models due to the lack of
 data and complex structures.
 We can not simplify the deep learning architecture when we have a non trivial
 problem but we can increase the training data by data augmentation.
 Given an input image, we can rotate, flip and zoom it to enrich our dataset.
 In Steller sea lion dataset, we use data augmentation to balance the sea
 lion types and improve classification performance.
 
\end_layout

\end_body
\end_document
