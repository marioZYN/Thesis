#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\options openright
\use_default_options false
\master ../thesis.lyx
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding T1
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 1
\use_package mhchem 0
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Indice
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style swiss
\dynamic_quotes 0
\papercolumns 1
\papersides 2
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
In this chapter, we present performance of our algorithm.
 First of all, a baseline approach is provided, using sliding window and
 CNN.
 Then we will use Count-ception architecture to do binary counting which
 does not require any classification.
 Finally, we discuss our modified version of Count-ception network, able
 to do classification and counting at the same time.
\end_layout

\begin_layout Section
Baseline Approach
\end_layout

\begin_layout Standard
We use sliding window patch extraction and CNN patch classification as a
 baseline approach to our sea lion counting problem.
 The whole pipeline for this approach is provided here:
\end_layout

\begin_layout Enumerate
Extract 96 x 96 patches from original images to construct training dataset.
\end_layout

\begin_layout Enumerate
Train our CNN network which is able to do 6 class classification (5 sea
 lion types + background).
\end_layout

\begin_layout Enumerate
In testing phase, we manually divide the image into patches and gather the
 classification results as the counting prediction.
\end_layout

\begin_layout Subsection
Patch extraction and training set construction
\end_layout

\begin_layout Standard
We already have each sea lion coordinates by using blob detection introduced
 in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:fourth-chapter"
plural "false"
caps "false"
noprefix "false"

\end_inset

 and we use these coordinates as patch centers.
 Each patch is of size 96 x 96.
 Including background patch, we have totally 6 classes of patches, and a
 sample of them is shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Patch-types"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/sea lion patches.png
	lyxscale 50
	width 90text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Patch-types"

\end_inset

Patch types
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
From all the training images, we extract 1000 patches for each sea lion
 type, and among them 85% are used as training, 15% are used as validation.
 We train our network in a mini-batch manner and each mini-batch contains
 30 patches under uniform sea lion distribution.
\end_layout

\begin_layout Subsection
CNN overview
\end_layout

\begin_layout Standard
Our CNN architecture takes a 96 x 96 x 3 patch as input and classifies it
 among six possible labels\SpecialChar endofsentence
 The whole network is shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:CNN-architecture"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/CNN architecture.png
	lyxscale 60
	width 60text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:CNN-architecture"

\end_inset

CNN architecture
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The last layer in this CNN is a fully connected layer and we append a softmax
 layer after it to convert the outputs into classification scores.
 The sea lion class with the highest score will be our prediction.
\end_layout

\begin_layout Subsection
Performance
\end_layout

\begin_layout Standard
This network is trained for 100 epochs under 
\begin_inset Formula $10^{-5}$
\end_inset

 learning rate.
 Since it is a classification network, we use cross entropy loss with Adam
 optimization and in order to have a better sense of the network performance,
 we add accuracy as an evaluation metric.
 The training and validation performance is shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Baseline-training-performance"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 As we can see, overfitting happens after around 35 epochs.
 We use the model with the best validation score to conduct testing.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/CNN train performance.png
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Baseline-training-performance"

\end_inset

Baseline training performance
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
We have a six-class classification problem with uniform data distribution
 and the accuracy we achieved after training is around 50%.
 So it is actually not bad for our CNN to classify patches.
 As mentioned before, we can get sea lion count prediction by first separating
 the whole image and then sum up classification results.
 The test dataset we construct has totally 184 images and the testing performanc
e is summarized in the Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Baseline-testing-performance"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="6">
<features tabularvalignment="middle" tabularwidth="100text%">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
sea lion types
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
adult_males
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
subadult_females
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
adult_females
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
juveniles
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
pups
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
average count error
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
25.77
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
40.98
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
7.53
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
199.75
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
314.83
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Baseline-testing-performance"

\end_inset

Baseline testing performance
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
We have very high counting error for juveniles and pups and there are two
 major reasons for this:
\end_layout

\begin_layout Enumerate
Juveniles and pups are inherently difficult to detect because they have
 smaller sizes compared to other sea lion types.
 Also pups look like rocks a lot.
 
\end_layout

\begin_layout Enumerate
By using non-overlapping patches with classification, we assume that the
 sea lions lie at the center of each patch, and there are maximumly one
 sea lion in each patch.
 However in the test images, sea lions not always lie in the patch centers,
 and pups for most of the time lie very near to other sea lions (possibly
 their mothers), so the above assumption does not hold.
\end_layout

\begin_layout Standard
The baseline approach treats counting problem as classification problem.
 Although we could achieve quite good results on classification, the counting
 performance is not so good due to the limitation of the algorithm itself.
 
\end_layout

\begin_layout Section
Binary Counting with Count-ception
\end_layout

\begin_layout Standard
We create a modified version of Count-ception architecture to generate binary
 counts for our sea lion images.
 This network has receptive filed size 48 x 48 and it generates a single
 prediction map indicating the number of all sea lion types.
 We design this architecture as a startup for our final algorithm and use
 it to verify that our Count-ception network works for sea lion dataset.
 
\end_layout

\begin_layout Standard
With learning rate equals to 
\begin_inset Formula $10^{-5}$
\end_inset

, the network is trained for 50 epochs under Adam optimization.
 We use 50 training images and each of them are divided into 25 non-overlapping
 tiles in order to deal with GPU's memory issue.
 One training tile example is illustrated in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Training-patch-example"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Thus there are totally 1250 tiles, among them 85% of them are used in training
 and the rest are used as validation dataset.
 In the testing phase, each image is first separated into 25 tiles and then
 sea lion count predictions of each tile are summed up to generate the final
 result.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/training patch.png
	lyxscale 20
	width 50text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Training-patch-example"

\end_inset

Training tile example
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The learning process is illustrated in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Sea-lion-binary-2"
plural "false"
caps "false"
noprefix "false"

\end_inset

, both the train loss and valid loss decrease as more training epochs are
 done.
 We perform redundant counting from highly overlapping receptive fields
 and in order to get the final counting prediction, we normalize the summation
 of all the pixel values in the prediction map.
 Train count error decreases during training while validation count error
 fluctuates quite a lot, but there is a decreasing trend.
 The figure indicates that if we increase the training epochs, we may get
 better results.
 However since our goal is to do multi-object counting, not binary counting,
 the result is sufficient to show that our Count-ception architecture could
 handle sea lion dataset.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/sea lion binary train loss.png
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Sea-lion-binary-2"

\end_inset

Sea lion binary learning process
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The results of sea lion binary counting are not bad, and as we can see in
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Sea-lion-binary"
plural "false"
caps "false"
noprefix "false"

\end_inset

, the algorithm not only learns the sea lion positions but also sea lion
 shapes, even though our learning objective is squares.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/target patch.png
	lyxscale 20
	width 40text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Target map
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/prediction patch.png
	lyxscale 20
	width 40text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Predicted map
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Sea-lion-binary"

\end_inset

Sea lion binary counting performance
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
In our experiments with sea lion binary classification, we discovered that
 enlarging the receptive field size of Count-ception architecture is necessary
 for recognizing sea lions.
 We need to carefully set its size to cover the largest object.
 As mentioned in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:fourth-chapter"
plural "false"
caps "false"
noprefix "false"

\end_inset

, we can deal with GPU memory issue by either rescaling the image or separating
 the image.
 The result above is achieved by image separation, but we also tried rescaling.
 By rescaling the image to 20% of its original size, we could feed the whole
 image into our network.
 However the performance is poor due to the fact that we lose a lot of detail
 information.
 In the end, we decide to use image separation to deal with memory issue.
 
\end_layout

\begin_layout Standard
After modifying the receptive field size of Count-ception architecture,
 sea lion binary counting works and the average counting error is illustrated
 in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Sea-lion-binary"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 The numbers verify that our network is able to process images with complex
 backgrounds, and using full resolution images under larger receptive field
 size achieves the best result.
 
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center

\size tiny
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="4">
<features tabularvalignment="middle" tabularwidth="100text%">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top">
<row>
<cell multirow="3" alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
algorithms
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
32x32 receptive field 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
48x48 receptive field
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
48x48 receptive field
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
0.5 resolution
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
 0.5 resolution
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
1.0 resolution
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
average count error
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
284.864
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
184.164
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
130.141
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Sea-lion-binary"

\end_inset

Sea lion binary testing performance
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The testing count error is high because our algorithm tends to generate
 false positives from rocks.
 Some rocks have very similar shapes and colors compared to sea lions.
 For example, the testing image shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Bad-case"
plural "false"
caps "false"
noprefix "false"

\end_inset

 is full of brown rocks and our Count-ception algorithms predicts 1584 sea
 lions while the true count is 100.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/bad case.png
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Bad-case"

\end_inset

Bad case
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Multi-class Counting with modified Count-ception
\end_layout

\begin_layout Standard
We generate multi-class heat maps by increasing the number of filters in
 the last convolution layer.
 Compared with sea lion binary counting, we are now facing five class counting
 which requires more parameters.
 This multi-class Count-ception architecture is a regression network which
 outputs five pixel values from a single receptive field.
 These values can be seen as scores for different sea lion types, for example
 if the area in the receptive field is sea water then all the five scores
 should be close to zero.
 
\end_layout

\begin_layout Standard
During our experiments, we encountered unbalanced sea lion distribution
 problem.
 Unlike sea lion binary counting where we only have a single heat map, here
 we have five heat maps and sea lions are distributed among them.
 Due to unbalanced distribution, some heat maps can contain a lot positive
 pixel values (like adult_females) while others can have very few (like
 adult_males).
 The total loss is computed as a summation of each individual pixel loss
 and this could lead to "always zero prediction".
 In order to deal with this problem, we create a weight balance layer which
 was discussed in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:fourth-chapter"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
The whole network is trained for 50 epochs with 
\begin_inset Formula $10^{-5}$
\end_inset

 learning rate under Adam optimization.
 We separate each training image into 25 tiles like what we did in sea lion
 binary counting, however not all the tiles are used here.
 Even though we have weight balance layer to adjust loss, it will not work
 if there are no sea lions at all.
 So we need to make sure that a tile contains at least one sea lion for
 each type.
 This is actually a very strict requirement and from 500 training images,
 we can only create 195 legal tiles.
 85% of these tiles are used for training and the rest are for validation.
 
\end_layout

\begin_layout Standard
The train and valid loss are shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Train-&-valid"
plural "false"
caps "false"
noprefix "false"

\end_inset

, both of them decrease with epochs, but the decreasing trend is not so
 significant, indicating the inherent difficulty of learning multi sea lion
 objects at the same time.
 The fluctuating behavior of validation is mostly due to the fact that we
 do not have so much validation data.
 In Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Train-count-error"
plural "false"
caps "false"
noprefix "false"

\end_inset

, training count error for each individual sea lion type is shown.
 Note that for pups, the training count error is low at the beginning because
 the initial weights happen to make its count error low.
 From this figure, we can notice that there is an error decreasing trend,
 even though it's a slow process.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/sea lion complete loss.png
	width 45text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Train-&-valid"

\end_inset

Train & valid loss
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/sea lion individual cerr.png
	width 45text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Train-count-error"

\end_inset

Train count error
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Sea-lion-complete"

\end_inset

Sea lion complete loss
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In order to understand the learning process for each sea lion type, train
 and valid count error is illustrated together in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Sea-lion-complete-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 For some sea lion type like adult females, the train and valid error is
 decreasing more significantly than others which means that it is easier
 to distinguish adult females.
 For juveniles and pups, the error is not decreasing so much, indicating
 the difficulty for recognizing them.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/sea lion complete cerr.png
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Sea-lion-complete-1"

\end_inset

Multi-class sea lion count error
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Given an input image patch, the predicted heat maps are shown in Figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Sea-lion-Complete"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 The most challenging issue for our algorithm is false positive prediction.
 As we can see in the heat maps, the algorithm works well for recognizing
 the existence of sea lions, but it works not so well for correctly classifying
 the sea lion type.
 Due to the similarity of each sea lion, our algorithm tends to generate
 a higher counting number than the real value.
 There are two major issues for our modified Count-ception network to be
 applied on sea lions dataset:
\end_layout

\begin_layout Enumerate
False positives from other types of sea lions and background noises like
 rocks.
\end_layout

\begin_layout Enumerate
It can happen that we produce correct sea lion counting number, but the
 sea lion activation area in the heat map is not correct.
 For example, the subadult males prediction in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Sea-lion-Complete"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/sea lion complete heat map.png
	lyxscale 50
	width 90text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Sea-lion-Complete"

\end_inset

Sea lion heat maps with five classes
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The testing performance is shown in Fable 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Count-ception-testing-performanc"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Even though the previous heat maps indicate a non satisfying classification
 result, our algorithm which is trained under less data and fewer epochs,
 performs better than the baseline approach.
 Our modified Count-ception network optimizes object counting by calculating
 the loss directly from the heat maps, and each pixel value in the input
 image is calculated redundantly to reduce variance.
 After inserting a weight balance layer, our network is able to deal with
 unbalanced class distribution.
 Moreover, during the experiments, we discovered a bonus behavior of the
 network which enables us to use very few positive samples to conduct training.
 Normally, in order to train a convolutional neural network, we need to
 feed a sufficient number of positive and negative samples which can be
 time and space consuming.
 However when we train a network in a fully convolutional way, positive
 and negative training samples are generated implicitly from convolution.
 For example, in our multi-sea lion counting problem, receptive fields in
 the input image are naturally divided into backgrounds and sea lions depending
 on the output pixel value.
 Training the network in a fully convolutional way saves us from manually
 extracting patches for constructing mini-batch and using weight balance
 layer enables us to train the network with very sparse images.
 
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="6">
<features tabularvalignment="middle" tabularwidth="100text%">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
sea lion types
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
adult_males
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
subadult_females
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
adult_females
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
juveniles
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
pups
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
average count error
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
47.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
6.3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
40.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
21..3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
35.8
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Count-ception-testing-performanc"

\end_inset

Count-ception testing performance
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
