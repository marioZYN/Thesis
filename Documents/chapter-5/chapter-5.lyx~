#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\options openright
\use_default_options false
\master ../thesis.lyx
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding T1
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 1
\use_package mhchem 0
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Indice
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style swiss
\dynamic_quotes 0
\papercolumns 1
\papersides 2
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
In this chapter, we talk about the performance of our algorithm.
 First of all, a baseline approach is provided, using sliding window and
 CNN.
 Then we will use Count-ception architecture to do binary counting which
 does not require any classification.
 Finally we discuss our modified version of Count-ception network, able
 to do classification and counting at the same time.
\end_layout

\begin_layout Section
Baseline Approach
\end_layout

\begin_layout Standard
We use sliding window patch extraction and CNN patch classification as a
 baseline approach to our sea lion counting problem.
 The whole pipeline for this approach is provided here:
\end_layout

\begin_layout Enumerate
Extract 96 x 96 patches from original images to construct training dataset.
\end_layout

\begin_layout Enumerate
Train our CNN network which is able to do 6 class classification (5 sea
 lion types + background).
\end_layout

\begin_layout Enumerate
In testing phase, we manually divide the image into patches and gather the
 classification results as the counting prediction.
\end_layout

\begin_layout Subsection
Patch extraction and training set construction
\end_layout

\begin_layout Standard
We already have each sea lion coordinates by using blob detection introduced
 in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:fourth-chapter"
plural "false"
caps "false"
noprefix "false"

\end_inset

 and we use these coordinates as patch centers.
 Each patch is of size 96 x 96 and we discard the illegal patches which
 are not big enough due to its location near the image boarder.
 Including background patch, we have totally 6 types of patches, and a sample
 of them is shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Patch-types"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/sea lion patches.png
	lyxscale 50
	width 70text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Patch-types"

\end_inset

Patch types
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
From all the training images, we extract 1000 patches for each sea lion
 type, and among them 85% are used as training, 15% are used as validation.
 We train our network in a mini-batch manner and each mini-batch contains
 30 patches under uniform sea lion distribution.
\end_layout

\begin_layout Subsection
CNN overview
\end_layout

\begin_layout Standard
Our CNN architecture takes a 96 x 96 x 3 patch as input and classifies it
 among six possible labels\SpecialChar endofsentence
 The whole network is shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:CNN-architecture"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/CNN architecture.png
	lyxscale 60
	width 60text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:CNN-architecture"

\end_inset

CNN architecture
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The last layer in this CNN is a fully connected layer and we append a softmax
 function after it to convert the outputs into classification scores.
 The sea lion class with the highest score will be our prediction.
\end_layout

\begin_layout Subsection
Performance
\end_layout

\begin_layout Standard
This network is trained for 100 epochs under 
\begin_inset Formula $10^{-5}$
\end_inset

 learning rate.
 Since it is a classification network, we use cross entropy loss with Adam
 optimization and in order to have a better sense of the network performance,
 we add accuracy as an evaluation metric.
 The training and validation performance is shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Baseline-training-performance"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 As we can see, overfitting happens after around 35 epochs.
 We use the model with the best validation score to conduct testing.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/CNN train performance.png
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Baseline-training-performance"

\end_inset

Baseline training performance
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
We have a six-class classification problem with uniform data distribution
 and the accuracy we achieved after training is around 50%.
 So it is actually not bad for our CNN to classify patches.
 As mentioned before, we can get sea lion count prediction by first separating
 the whole image and then sum up classification results.
 The test dataset we construct has totally 184 images and the testing performanc
e is summarized in the following table:
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="6">
<features tabularvalignment="middle" tabularwidth="100text%">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
sea lion types
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
adult_males
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
subadult_females
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
adult_females
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
juveniles
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
pups
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
average count error
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
25.77
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
40.98
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
7.53
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
199.75
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size tiny
314.83
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Baseline testing performance
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
We have very high counting error for juveniles and pups and there are mainly
 two reasons for this:
\end_layout

\begin_layout Enumerate
Juveniles and pups are inherently difficult to detect because they have
 smaller sizes compared to other sea lion types.
 Also pups look like rocks a lot.
 
\end_layout

\begin_layout Enumerate
By using non-overlapping patches with classification approach, we assume
 that the sea lions lie at the center of each patch, and there are maximumly
 one sea lion in each patch.
 However in the test images, sea lions not always lie in the patch centers
 and, pups for most of the time lie very near to other sea lions (possibly
 their mothers), so the above assumption does not hold.
\end_layout

\begin_layout Standard
The baseline approach treats counting problem as classification problem.
 Although we could achieve quite good results on classification, the counting
 performance is not so good due to the limitation of the algorithm itself.
 
\end_layout

\begin_layout Section
Binary Counting with Count-ception
\end_layout

\begin_layout Standard
We create a modified version of Count-ception architecture to generate binary
 counts for our sea lion images.
 This network has receptive filed size 48 x 48 and it generates a single
 prediction map indicating the number of all sea lion types.
 We design this architecture as a startup for our final algorithm and use
 it to verify that our Count-ception network works for sea lion dataset.
 
\end_layout

\begin_layout Standard
With learning rate equals to 
\begin_inset Formula $10^{-5}$
\end_inset

, the network is trained for 60 epochs under Adam optimization.
 We use 50 training images and each of them are divided into 25 non-overlapping
 patches in order to deal with GPU's memory issue.
 One training patch example is illustrated in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Training-patch-example"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Thus there are totally 1250 patches, among them 85% of them are used in
 training and the rest are used as validation dataset.
 In the testing phase, each image is first separated into 25 patches and
 then sea lion count predictions of each patch are summed up to generate
 the final result.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/training patch.png
	lyxscale 30
	width 70text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Training-patch-example"

\end_inset

Training patch example
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The result of sea lion binary counting is not bad, and as we can see in
 figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Sea-lion-binary"
plural "false"
caps "false"
noprefix "false"

\end_inset

, the algorithm not only learns the sea lion positions but also sea lion
 shapes, even though our learning objective is squares.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/target patch.png
	lyxscale 20
	width 40text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Target map
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/prediction patch.png
	lyxscale 20
	width 40text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Predicted map
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Sea-lion-binary"

\end_inset

Sea lion binary counting performance
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
In our experiments with sea lion binary classification, we discovered that
 enlarging the receptive field size of Count-ception architecture is necessary
 for recognizing sea lions.
 We need to carefully design its size to cover the largest object.
 As mentioned in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:fourth-chapter"
plural "false"
caps "false"
noprefix "false"

\end_inset

, we can deal with GPU memory issue by either rescaling the image or separating
 the image.
 The result above is achieved by image separation, and we also tried rescaling.
 By rescaling the image to 20% of its original size, we could feed the whole
 image into our network.
 However the performance is bad due to the fact that we lose a lot of detail
 information.
 In the end, we decide to use image separation approach to deal with memory
 issue.
 
\end_layout

\begin_layout Standard
After modifying the receptive field size of Count-ception architecture,
 sea lion binary counting works well and the average counting error is illustrat
ed in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Sea-lion-binary-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 The numbers verify that the network can process images with complex backgrounds
 and extracts patterns to generate object counts.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Sea-lion-binary-1"

\end_inset

Sea lion binary counting performance
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Multi-class Counting with modified Count-ception
\end_layout

\begin_layout Standard
We generate multi-class heat maps by increasing the number of filters in
 the last convolution layer.
 Compared with sea lion binary counting, we are now doing five class counting
 which requires more parameters.
 This multi-class Count-ception architecture is a regression network which
 outputs five pixel values from a single receptive field.
 These values can be seen as scores for different sea lion types, for example
 if the area in the receptive field is sea water then all the five scores
 should be close to zero.
 
\end_layout

\begin_layout Standard
During our experiments, we encountered unbalanced sea lion distribution
 problem.
 Unlike sea lion binary counting where we only have a single heat map, here
 we have five heat maps and sea lions are distributed among them.
 Due to its unbalanced distribution, some heat maps can contain a lot positive
 pixel values (like adult_females) while others can have very few (like
 adult_males).
 The total loss is computed as a summation of each individual pixel loss
 and this could lead to "always zero prediction".
 In order to deal with this problem, we invent a weight balance layer which
 is discussed in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:fourth-chapter"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
The whole network is trained for 60 epochs with 
\begin_inset Formula $10^{-5}$
\end_inset

 learning rate under Adam optimization.
 We separate each training image into 25 patches like what we did in sea
 lion binary counting, however not all the patches are used here.
 Even though we have weight balance layer to adjusts loss, it will not work
 if there are no sea lions at all.
 So we need to make sure that a patch contains at least one sea lion for
 each type.
 This is actually a very strict requirement and from 500 training images,
 we can only create 195 legal patches.
 85% of these patches are used for training and the rest are for validation.
 
\end_layout

\end_body
\end_document
