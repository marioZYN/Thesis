#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\options openright
\use_default_options false
\master thesis.lyx
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding T1
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 1
\use_package mhchem 0
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Indice
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style swiss
\dynamic_quotes 0
\papercolumns 1
\papersides 2
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
This paper concerns automated object classification and counting in high
 resolution images.
 The approach we take is to use a fully convolutional network based Count-ceptio
n architecture to regress a spatial density map across the image.
 Training our model end-to-end in a fully convolutional manner is beneficial
 to the images which have object clumping or overlapping.
 High resolution images make GPU training difficult because it will occupy
 a lot of memory, and we tackle this problem by dividing the whole image
 into several patches.
 The original Count-ception architecture only deals with single object counting,
 and we append more filters in the final convolution layer in order to integrate
 classification functionality.
 During our experiments we find that unbalanced object distribution hurts
 the performance and moreover low density target maps will force our algorithm
 to output zero.
 We solve this problem by inventing a weight balance layer which assigns
 weight coefficients in the loss function.
 
\end_layout

\begin_layout Standard
Multi-objects counting in crowded images is an extremely tedious and time
 consuming task encountered in many real-world applications.
 And in many situations we do not need to predict exact locations for each
 object, thus we would like to avoid using complex models for object detection
 like faster R-CNN.
 We invent this modified version of Count-ception architecture for simultaneousl
y object classification and counting, and testify it on the sea lion dataset
 provided by NOAA.
 Since the sea lion dataset is inherently difficult with complex backgrounds
 and very similar objects, we can foresee that our algorithm can be applied
 for many other problems, including biology, remote sensing, surveillance,
 and etc.
 
\end_layout

\begin_layout Section*
Further improvements
\end_layout

\begin_layout Standard
1.
 High resolution images
\end_layout

\begin_layout Standard
As mentioned in the previous chapter, in order to deal with GPU's memory
 consumption we can resort to image separation or image scaling.
 However both methods have disadvantages and can hurt performance.
 We processing the whole image in a fully convolutional way in order to
 deal with images having object clumping and overlapping, but by first doing
 image separation 
\end_layout

\end_body
\end_document
